import {
  defaultPreviewUrlCallback,
  require_uploadcare,
  useCommitedCallback,
  useCustomTabs,
  useDeepEffect
} from "./chunk-SLCMYLFG.js";
import {
  _createForOfIteratorHelper,
  _objectSpread2,
  _objectWithoutProperties,
  _slicedToArray,
  _toConsumableArray
} from "./chunk-JYLAS47U.js";
import {
  require_react_fast_compare
} from "./chunk-ZHWTNUOZ.js";
import {
  require_react
} from "./chunk-ZQ3TVT43.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@uploadcare/react-widget/dist/esm/dialog-54d73a1e.mjs
var import_react = __toESM(require_react(), 1);
var import_uploadcare_widget = __toESM(require_uploadcare(), 1);
var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);
var _excluded = ["value", "apiRef", "onTabChange", "onChange", "onProgress", "customTabs", "previewUrlCallback", "metadataCallback"];
var containerStyles = {
  height: "500px",
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "center"
};
var getHiddenDoneButtonStyle = function getHiddenDoneButtonStyle2(containerId) {
  return (
    /* css */
    "\n  .".concat(containerId, " .uploadcare--preview__done:not(.uploadcare-tab-effects--done),\n  .").concat(containerId, " .uploadcare--panel__done:not(.uploadcare-tab-effects--done) {\n    display: none;\n  }\n")
  );
};
var getValueItems = function getValueItems2(value, props) {
  var uuids = [];
  if (value) {
    uuids = Array.isArray(value) ? value : [value];
  }
  return uuids;
};
var useDialog = function useDialog2(props, uploadcare2) {
  var value = props.value, apiRef = props.apiRef, onTabChange = props.onTabChange, onChange = props.onChange, onProgress = props.onProgress, customTabs = props.customTabs, previewUrlCallback = props.previewUrlCallback, metadataCallback = props.metadataCallback, restProps = _objectWithoutProperties(props, _excluded);
  var tabsCss = restProps.tabsCss, locale = restProps.locale, localeTranslations = restProps.localeTranslations, localePluralize = restProps.localePluralize;
  var panelContainer = (0, import_react.useRef)(null);
  var panelInstance = (0, import_react.useRef)(null);
  var onTabChangeCallback = useCommitedCallback(onTabChange);
  var onChangeCallback = useCommitedCallback(onChange);
  var onProgressCallback = useCommitedCallback(onProgress);
  var metadataCommitedCallback = useCommitedCallback(metadataCallback);
  var previewUrlCommitedCallback = useCommitedCallback(previewUrlCallback || defaultPreviewUrlCallback);
  useCustomTabs(customTabs, uploadcare2);
  useDeepEffect(function() {
    if (locale) window.UPLOADCARE_LOCALE = locale;
    if (localePluralize) window.UPLOADCARE_LOCALE_PLURALIZE = localePluralize;
    if (localeTranslations) {
      window.UPLOADCARE_LOCALE_TRANSLATIONS = localeTranslations;
    }
    return function() {
      if (locale) delete window.UPLOADCARE_LOCALE;
      if (localePluralize) delete window.UPLOADCARE_LOCALE_PLURALIZE;
      if (localeTranslations) delete window.UPLOADCARE_LOCALE_TRANSLATIONS;
    };
  }, [locale, localePluralize, localeTranslations]);
  (0, import_react.useEffect)(function() {
    if (uploadcare2 && tabsCss && typeof tabsCss === "string") {
      if (tabsCss.indexOf("https://") === 0) {
        uploadcare2.tabsCss.addUrl(tabsCss);
      } else {
        uploadcare2.tabsCss.addStyle(tabsCss);
      }
    }
  }, [uploadcare2, tabsCss]);
  (0, import_react.useEffect)(function() {
    var files = getValueItems(value);
    panelInstance.current && panelInstance.current.reject();
    panelInstance.current = uploadcare2.openPanel(panelContainer.current, files, _objectSpread2(_objectSpread2({
      multipleMax: restProps.multiple ? void 0 : 1
    }, restProps), {}, {
      multiple: true,
      metadataCallback: restProps.metadata ? void 0 : metadataCommitedCallback,
      previewUrlCallback: previewUrlCommitedCallback
    }));
  }, [uploadcare2].concat(_toConsumableArray(Object.values(restProps))));
  (0, import_react.useEffect)(function() {
    var dialogApi = panelInstance.current;
    dialogApi.progress(onTabChangeCallback);
    var onChangeWrapper = function onChangeWrapper2() {
      var items = panelInstance.current.fileColl.__items.map(function(deferred) {
        return deferred.promise();
      });
      onChangeCallback(items);
    };
    var onProgressWrapper = function onProgressWrapper2() {
      var lastProgresses = panelInstance.current.fileColl.lastProgresses();
      onProgressCallback(lastProgresses);
    };
    dialogApi.fileColl.anyProgressList.add(onProgressWrapper);
    dialogApi.fileColl.anyDoneList.add(onChangeWrapper);
    dialogApi.fileColl.anyFailList.add(onChangeWrapper);
    dialogApi.fileColl.onRemove.add(onChangeWrapper);
    dialogApi.fileColl.onReplace.add(onChangeWrapper);
    dialogApi.fileColl.onSort.add(onChangeWrapper);
    return function() {
      var dialogApi2 = panelInstance.current;
      dialogApi2.fileColl.anyProgressList.remove(onProgressWrapper);
      dialogApi2.fileColl.anyDoneList.remove(onChangeWrapper);
      dialogApi2.fileColl.anyFailList.remove(onChangeWrapper);
      dialogApi2.fileColl.onRemove.remove(onChangeWrapper);
      dialogApi2.fileColl.onReplace.remove(onChangeWrapper);
      dialogApi2.fileColl.onSort.remove(onChangeWrapper);
    };
  }, [].concat(_toConsumableArray(Object.values(restProps)), [onTabChangeCallback, onChangeCallback, onProgressCallback]));
  (0, import_react.useImperativeHandle)(apiRef, function() {
    return {
      onTabVisibility: function onTabVisibility(cb) {
        return panelInstance.current.onTabVisibility(cb);
      },
      hideTab: function hideTab(tab) {
        return panelInstance.current.hideTab(tab);
      },
      showTab: function showTab(tab) {
        return panelInstance.current.showTab(tab);
      },
      switchTab: function switchTab(tab) {
        return panelInstance.current.switchTab(tab);
      },
      addFiles: function addFiles(files) {
        return panelInstance.current.addFiles(files);
      },
      isTabVisible: function isTabVisible(tab) {
        return panelInstance.current.isTabVisible(tab);
      },
      getFileColl: function getFileColl() {
        return panelInstance.current.fileColl;
      },
      getRawDialogApi: function getRawDialogApi() {
        return panelInstance.current;
      }
    };
  }, []);
  (0, import_react.useEffect)(function() {
    return function() {
      return panelInstance.current && panelInstance.current.reject();
    };
  }, []);
  (0, import_react.useEffect)(function() {
    var isUpdated = false;
    panelInstance.current.fileColl.clear();
    var files = getValueItems(value);
    var _iterator = _createForOfIteratorHelper(files), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var item = _step.value;
        if (typeof item === "string" && item.includes("~")) {
          uploadcare2.loadFileGroup(item, props).then(function(fileGroup) {
            if (!isUpdated) {
              var _files = fileGroup.files();
              panelInstance.current.addFiles(_files);
            }
          });
          break;
        }
        panelInstance.current.fileColl.add(uploadcare2.fileFrom("uploaded", item, props));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return function() {
      isUpdated = true;
    };
  }, [value]);
  return [panelContainer];
};
var Dialog = function Dialog2(props) {
  var _useState = (0, import_react.useState)(function() {
    return "uploadcare-".concat(Date.now());
  }), _useState2 = _slicedToArray(_useState, 1), containerId = _useState2[0];
  var styleElement = (0, import_react.useMemo)(function() {
    return import_react.default.createElement("style", null, getHiddenDoneButtonStyle(containerId));
  }, [containerId]);
  var _useDialog = useDialog(props, import_uploadcare_widget.default), _useDialog2 = _slicedToArray(_useDialog, 1), containerRef = _useDialog2[0];
  return import_react.default.createElement("div", {
    id: props.id,
    className: containerId,
    style: containerStyles
  }, styleElement, import_react.default.createElement("div", {
    ref: containerRef
  }));
};
export {
  Dialog as default
};
//# sourceMappingURL=dialog-54d73a1e-XKQEFCQ2.js.map
