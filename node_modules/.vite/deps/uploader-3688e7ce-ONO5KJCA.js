import {
  defaultPreviewUrlCallback,
  require_uploadcare,
  useCommitedCallback,
  useCustomTabs,
  useDeepEffect
} from "./chunk-SLCMYLFG.js";
import {
  _objectSpread2,
  _objectWithoutProperties
} from "./chunk-JYLAS47U.js";
import {
  require_react_fast_compare
} from "./chunk-ZHWTNUOZ.js";
import {
  require_react
} from "./chunk-ZQ3TVT43.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@uploadcare/react-widget/dist/esm/uploader-3688e7ce.mjs
var import_react = __toESM(require_react(), 1);
var import_uploadcare_widget = __toESM(require_uploadcare(), 1);
var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);
var useValidators = function useValidators2(widget, validators) {
  (0, import_react.useEffect)(function() {
    if (validators != null) {
      var instance = widget.current;
      validators.forEach(function(validator) {
        instance.validators.push(validator);
      });
      return function() {
        instance.validators.length = 0;
      };
    }
  }, [widget, validators]);
};
function useDeepMemo(factory, deps) {
  var isValid = true;
  var valueRef = (0, import_react.useRef)();
  if (!valueRef.current) {
    valueRef.current = {
      deps,
      result: factory()
    };
  } else {
    isValid = !!(deps && valueRef.current.deps && (0, import_react_fast_compare.default)(deps, valueRef.current.deps));
  }
  var cache = isValid ? valueRef.current : {
    deps,
    result: factory()
  };
  valueRef.current = cache;
  return cache.result;
}
var _excluded = ["id", "name", "value", "onFileSelect", "onChange", "onDialogOpen", "onDialogClose", "onTabChange", "apiRef", "customTabs", "validators", "tabsCss", "locale", "localeTranslations", "localePluralize", "previewUrlCallback", "metadataCallback"];
var useWidget = function useWidget2(_ref, uploadcare2) {
  var id = _ref.id, name = _ref.name, value = _ref.value, onFileSelect = _ref.onFileSelect, onChange = _ref.onChange, onDialogOpen = _ref.onDialogOpen, onDialogClose = _ref.onDialogClose, onTabChange = _ref.onTabChange, apiRef = _ref.apiRef, customTabs = _ref.customTabs, validators = _ref.validators, tabsCss = _ref.tabsCss, locale = _ref.locale, localeTranslations = _ref.localeTranslations, localePluralize = _ref.localePluralize, previewUrlCallback = _ref.previewUrlCallback, metadataCallback = _ref.metadataCallback, options = _objectWithoutProperties(_ref, _excluded);
  var input = (0, import_react.useRef)(null);
  var widget = (0, import_react.useRef)(null);
  var cachedValueRef = (0, import_react.useRef)(null);
  var fileSelectedCallback = useCommitedCallback(onFileSelect);
  var changeCallback = useCommitedCallback(onChange);
  var dialogOpenCallback = useCommitedCallback(onDialogOpen);
  var dialogCloseCallback = useCommitedCallback(onDialogClose);
  var tabChangeCallback = useCommitedCallback(onTabChange);
  var metadataCommitedCallback = useCommitedCallback(metadataCallback);
  var previewUrlCommitedCallback = useCommitedCallback(previewUrlCallback || defaultPreviewUrlCallback);
  var widgetOptions = useDeepMemo(function() {
    return options;
  }, [options]);
  useCustomTabs(customTabs, uploadcare2);
  useDeepEffect(function() {
    if (locale) window.UPLOADCARE_LOCALE = locale;
    if (localePluralize) window.UPLOADCARE_LOCALE_PLURALIZE = localePluralize;
    if (localeTranslations) {
      window.UPLOADCARE_LOCALE_TRANSLATIONS = localeTranslations;
    }
    uploadcare2.plugin(function(internal) {
      internal.locale.rebuild({
        locale: locale || null,
        localeTranslations: localeTranslations || null,
        localePluralize: localePluralize || null
      });
    });
    return function() {
      if (locale) delete window.UPLOADCARE_LOCALE;
      if (localePluralize) delete window.UPLOADCARE_LOCALE_PLURALIZE;
      if (localeTranslations) delete window.UPLOADCARE_LOCALE_TRANSLATIONS;
    };
  }, [locale, localeTranslations, localePluralize]);
  (0, import_react.useEffect)(function() {
    var inputEl = input.current;
    widget.current = uploadcare2.Widget(inputEl, _objectSpread2(_objectSpread2({}, widgetOptions), {}, {
      metadataCallback: widgetOptions.metadata ? void 0 : metadataCommitedCallback,
      previewUrlCallback: previewUrlCommitedCallback
    }));
    var widgetElement = inputEl.nextSibling;
    if (cachedValueRef.current) {
      widget.current.value(cachedValueRef.current);
    }
    return function() {
      uploadcare2.jQuery(inputEl).removeData("uploadcareWidget");
      widgetElement && widgetElement.remove();
    };
  }, [uploadcare2, widgetOptions, metadataCommitedCallback, previewUrlCommitedCallback]);
  useValidators(widget, validators);
  (0, import_react.useEffect)(function() {
    widget.current.onUploadComplete.add(changeCallback);
    widget.current.onChange.add(fileSelectedCallback);
    return function() {
      widget.current.onUploadComplete.remove(changeCallback);
      widget.current.onChange.remove(fileSelectedCallback);
    };
  }, [changeCallback, fileSelectedCallback, uploadcare2, widgetOptions]);
  (0, import_react.useEffect)(function() {
    var dialog;
    var saveDialog = function saveDialog2(ref) {
      dialog = ref;
      dialog.done(dialogCloseCallback).fail(dialogCloseCallback).progress(tabChangeCallback);
      dialogOpenCallback(ref);
    };
    widget.current.onDialogOpen.add(saveDialog);
    return function() {
      widget.current.onDialogOpen.remove(saveDialog);
      dialog && dialog.reject();
    };
  }, [dialogCloseCallback, dialogOpenCallback, tabChangeCallback, widgetOptions]);
  (0, import_react.useEffect)(function() {
    var files = [];
    var saveFiles = function saveFiles2(file) {
      if (file) {
        files = file.files ? file.files() : [file];
      } else {
        files = [];
      }
    };
    widget.current.onChange.add(saveFiles);
    return function() {
      files.forEach(function(file) {
        return file.cancel();
      });
      widget.current.onChange.remove(saveFiles);
    };
  }, [widgetOptions]);
  (0, import_react.useEffect)(function() {
    if (cachedValueRef.current !== value) {
      widget.current.value(value);
    }
    cachedValueRef.current = value;
  }, [value]);
  (0, import_react.useEffect)(function() {
    if (uploadcare2 && tabsCss && typeof tabsCss === "string") {
      if (tabsCss.indexOf("https://") === 0) {
        uploadcare2.tabsCss.addUrl(tabsCss);
      } else {
        uploadcare2.tabsCss.addStyle(tabsCss);
      }
    }
  }, [uploadcare2, tabsCss]);
  (0, import_react.useImperativeHandle)(apiRef, function() {
    return {
      openDialog: function openDialog() {
        return widget.current.openDialog();
      },
      reloadInfo: function reloadInfo() {
        return widget.current.reloadInfo();
      },
      getInput: function getInput() {
        return widget.current.inputElement;
      },
      value: function value2(_value) {
        return widget.current.value(_value);
      }
    };
  }, []);
  return (0, import_react.useCallback)(function() {
    return import_react.default.createElement("input", {
      type: "hidden",
      ref: input,
      id,
      name
    });
  }, [id, name]);
};
var Uploader = function Uploader2(props) {
  var Input = useWidget(props, import_uploadcare_widget.default);
  return import_react.default.createElement(Input, null);
};
export {
  Uploader as default
};
//# sourceMappingURL=uploader-3688e7ce-ONO5KJCA.js.map
